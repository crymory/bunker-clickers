import React, { useState, useEffect } from 'react';
import './App.css';

const TABS = {
  GAME: 'game',
  SHOP: 'shop',
  STATS: 'stats',
};

function App() {
  const [tab, setTab] = useState(TABS.GAME);
  const [caps, setCaps] = useState(() => parseInt(localStorage.getItem('caps')) || 0);
  const [clickValue, setClickValue] = useState(() => parseInt(localStorage.getItem('clickValue')) || 1);
  const [autoClicker, setAutoClicker] = useState(() => localStorage.getItem('autoClicker') === 'true');
  const [energy, setEnergy] = useState(() => parseInt(localStorage.getItem('energy')) || 20);
  const [maxEnergy, setMaxEnergy] = useState(() => parseInt(localStorage.getItem('maxEnergy')) || 20);

  const [clickLevel, setClickLevel] = useState(() => parseInt(localStorage.getItem('clickLevel')) || 1);
  const [energyLevel, setEnergyLevel] = useState(() => parseInt(localStorage.getItem('energyLevel')) || 1);

  const [clickGains, setClickGains] = useState([]);
  const [boostsModalOpen, setBoostsModalOpen] = useState(false);

  useEffect(() => {
    if (autoClicker) {
      const interval = setInterval(() => {
        setCaps(prev => {
          const next = prev + 1;
          localStorage.setItem('caps', next);
          return next;
        });
      }, 2000);
      return () => clearInterval(interval);
    }
  }, [autoClicker]);

  useEffect(() => {
    const regenInterval = setInterval(() => {
      setEnergy(prev => {
        if (prev < maxEnergy) {
          const next = prev + 1;
          localStorage.setItem('energy', next);
          return next;
        }
        return prev;
      });
    }, 60000);
    return () => clearInterval(regenInterval);
  }, [maxEnergy]);

  useEffect(() => localStorage.setItem('caps', caps), [caps]);
  useEffect(() => localStorage.setItem('clickValue', clickValue), [clickValue]);
  useEffect(() => localStorage.setItem('autoClicker', autoClicker), [autoClicker]);
  useEffect(() => localStorage.setItem('energy', energy), [energy]);
  useEffect(() => localStorage.setItem('maxEnergy', maxEnergy), [maxEnergy]);
  useEffect(() => localStorage.setItem('clickLevel', clickLevel), [clickLevel]);
  useEffect(() => localStorage.setItem('energyLevel', energyLevel), [energyLevel]);

  function handleClick() {
    if (energy > 0) {
      setCaps(prev => prev + clickValue);
      setEnergy(prev => prev - 1);

      const id = Date.now() + Math.random();
      setClickGains(prev => [...prev, { id, text: `+${clickValue}` }]);
      setTimeout(() => {
        setClickGains(prev => prev.filter(g => g.id !== id));
      }, 800);
    } else {
      alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏!');
    }
  }

  function buyUpgrade(id) {
    if (id === 'clickUpgrade' && caps >= 100 * clickLevel) {
      setCaps(caps - 100 * clickLevel);
      setClickValue(prev => prev + 1);
      setClickLevel(prev => prev + 1);
    } else if (id === 'autoClicker' && caps >= 250 && !autoClicker) {
      setCaps(caps - 250);
      setAutoClicker(true);
    } else if (id === 'energyBoost' && caps >= 150 * energyLevel) {
      setCaps(caps - 150 * energyLevel);
      setMaxEnergy(prev => prev + 10);
      setEnergy(prev => prev + 10);
      setEnergyLevel(prev => prev + 1);
    } else {
      alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–ø—Å –∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ —É–∂–µ –∫—É–ø–ª–µ–Ω–æ');
    }
  }

  return (
    <div className="app">
      {/* –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å –≤–∫–ª–∞–¥–æ–∫ */}
      <nav className="bottom-tabs">
        {Object.values(TABS).map(t => (
          <button
            key={t}
            onClick={() => setTab(t)}
            className={`bottom-tab ${tab === t ? 'active' : ''}`}
          >
            {t === 'game' ? 'üéÆ' : t === 'shop' ? 'üõí' : 'üìä'}
          </button>
        ))}
      </nav>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
      {tab === TABS.GAME && (
        <>
          <div className="top-bar">
            <button className="boosts-toggle-button" onClick={() => setBoostsModalOpen(true)}>
              –ë—É—Å—Ç—ã
            </button>

            <div className="energy" title="–≠–Ω–µ—Ä–≥–∏—è">
              <span className="battery-icon">üîã</span> {energy}/{maxEnergy}
            </div>
          </div>

          <div className="counter">–ö–∞–ø—Å—ã: {caps.toLocaleString('ru-RU')}</div>

          <div className="click-button-container">
            <button
              className="click-button"
              onClick={handleClick}
              disabled={energy === 0}
              title={energy === 0 ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏' : '–ö–ª–∏–∫–Ω–∏!'}
            >
              üí£
            </button>
            {clickGains.map(gain => (
              <div key={gain.id} className="click-gain">{gain.text}</div>
            ))}
          </div>
        </>
      )}

      {tab === TABS.SHOP && (
        <div className="shop">
          <p>–ú–∞–≥–∞–∑–∏–Ω –±—É–¥–µ—Ç –ø–æ–∑–∂–µ :)</p>
        </div>
      )}

      {tab === TABS.STATS && (
        <div className="stats">
          <p>–í—Å–µ–≥–æ –∫–∞–ø—Å: {caps.toLocaleString('ru-RU')}</p>
          <p>–ó–Ω–∞—á–µ–Ω–∏–µ –∫–ª–∏–∫–∞: x{clickValue}</p>
          <p>–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä: {autoClicker ? '–í–∫–ª—é—á—ë–Ω' : '–í—ã–∫–ª—é—á–µ–Ω'}</p>
          <p>–≠–Ω–µ—Ä–≥–∏—è: {energy}/{maxEnergy}</p>
          <p>–£—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–∫–∞: {clickLevel}</p>
          <p>–£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏: {energyLevel}</p>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±—É—Å—Ç–æ–≤ */}
      {boostsModalOpen && (
        <div className="modal-overlay" onClick={() => setBoostsModalOpen(false)}>
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <h2>–ë—É—Å—Ç—ã</h2>

            <div className="boosts">
              <div className="boost-card">
                <h3>–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∏–∫</h3>
                <p>–£—Ä–æ–≤–µ–Ω—å: {clickLevel} | +{clickLevel} –∫ –∫–ª–∏–∫—É</p>
                <button
                  onClick={() => buyUpgrade('clickUpgrade')}
                  disabled={caps < 100 * clickLevel}
                >
                  –ö—É–ø–∏—Ç—å –∑–∞ {100 * clickLevel} –∫–∞–ø—Å
                </button>
              </div>

              <div className="boost-card">
                <h3>–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä</h3>
                <p>+1 –∫–∞–ø—Å–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã</p>
                <button
                  onClick={() => buyUpgrade('autoClicker')}
                  disabled={autoClicker || caps < 250}
                >
                  {autoClicker ? '–ö—É–ø–ª–µ–Ω–æ ‚úÖ' : '–ö—É–ø–∏—Ç—å –∑–∞ 250 –∫–∞–ø—Å'}
                </button>
              </div>

              <div className="boost-card">
                <h3>–≠–Ω–µ—Ä–≥–∏—è</h3>
                <p>–£—Ä–æ–≤–µ–Ω—å: {energyLevel} | +{energyLevel * 10} –∫ –º–∞–∫—Å–∏–º—É–º—É —ç–Ω–µ—Ä–≥–∏–∏</p>
                <button
                  onClick={() => buyUpgrade('energyBoost')}
                  disabled={caps < 150 * energyLevel}
                >
                  –ö—É–ø–∏—Ç—å –∑–∞ {150 * energyLevel} –∫–∞–ø—Å
                </button>
              </div>
            </div>

            <button
              className="modal-close-button"
              onClick={() => setBoostsModalOpen(false)}
            >
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

export default App;
