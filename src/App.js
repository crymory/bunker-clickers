import React, { useState, useEffect } from 'react';
import './App.css';

/* --- –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã --- */
const TABS = { GAME: 'game', SHOP: 'shop', STATS: 'stats' };
const AUTO_INTERVAL = 2000;           // –∞–≤—Ç–æ–∫–ª–∏–∫: 1 –∫–∞–ø—Å–∞ / 2 —Å
const OFFLINE_THRESHOLD = 60 * 60e3;  // –æ—Ñ–ª–∞–π–Ω-–º–æ–¥–∞–ª–∫–∞ –ø–æ—Å–ª–µ 1 —á

/* --- —Ö–µ–ª–ø–µ—Ä—ã --- */
const num = key => parseInt(localStorage.getItem(key) || '0', 10);

function App() {
  /* ---------- —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---------- */
  const [loading, setLoading] = useState(true);

  const [tab, setTab]           = useState(TABS.GAME);
  const [caps, setCaps]         = useState(() => num('caps'));
  const [clickValue, setClickValue] = useState(() => num('clickValue') || 1);
  const [autoClicker, setAutoClicker] = useState(() => localStorage.getItem('autoClicker') === 'true');
  const [energy, setEnergy]     = useState(() => num('energy') || 20);
  const [maxEnergy, setMaxEnergy] = useState(() => num('maxEnergy') || 20);
  const [clickLevel, setClickLevel] = useState(() => num('clickLevel') || 1);
  const [energyLevel, setEnergyLevel] = useState(() => num('energyLevel') || 1);

  const [clickGains, setClickGains] = useState([]);
  const [boostsModal, setBoostsModal] = useState(false);

  const [showOfflineModal, setShowOfflineModal] = useState(false);
  const [offlineEarned, setOfflineEarned] = useState(0);

  /* ---------- –ø—Ä–µ–ª–æ–∞–¥–µ—Ä + –æ—Ñ–ª–∞–π–Ω-—Ñ–∞—Ä–º ---------- */
  useEffect(() => {
    const timer = setTimeout(() => setLoading(false), 800);   // –∏–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏

    /* –æ—Ñ–ª–∞–π–Ω-–∫–∞–ª—å–∫—É–ª—è—Ü–∏—è */
    const lastVisit = parseInt(localStorage.getItem('lastVisit') || Date.now(), 10);
    const delta = Date.now() - lastVisit;

    if (autoClicker && delta > AUTO_INTERVAL) {
      const earned = Math.floor(delta / AUTO_INTERVAL);
      if (earned > 0) {
        setCaps(prev => {
          const next = prev + earned;
          localStorage.setItem('caps', next);
          return next;
        });
        setOfflineEarned(earned);
        if (delta >= OFFLINE_THRESHOLD) setShowOfflineModal(true);
      }
    }

    return () => clearTimeout(timer);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  /* ---------- –æ–Ω–ª–∞–π–Ω-–∞–≤—Ç–æ–∫–ª–∏–∫ ---------- */
  useEffect(() => {
    if (!autoClicker) return;
    const id = setInterval(() => {
      setCaps(prev => {
        const next = prev + 1;
        localStorage.setItem('caps', next);
        return next;
      });
    }, AUTO_INTERVAL);
    return () => clearInterval(id);
  }, [autoClicker]);

  /* ---------- —Ä–µ–≥–µ–Ω —ç–Ω–µ—Ä–≥–∏–∏ ---------- */
  useEffect(() => {
    const id = setInterval(() => {
      setEnergy(prev => {
        if (prev < maxEnergy) {
          const next = prev + 1;
          localStorage.setItem('energy', next);
          return next;
        }
        return prev;
      });
    }, 60_000);
    return () => clearInterval(id);
  }, [maxEnergy]);

  /* ---------- –∑–∞–ø–∏—Å—å –≤—Å–µ—Ö —Å—Ç–µ–π—Ç–æ–≤ ---------- */
  useEffect(() => {
    localStorage.setItem('caps', caps);
    localStorage.setItem('clickValue', clickValue);
    localStorage.setItem('autoClicker', autoClicker);
    localStorage.setItem('energy', energy);
    localStorage.setItem('maxEnergy', maxEnergy);
    localStorage.setItem('clickLevel', clickLevel);
    localStorage.setItem('energyLevel', energyLevel);
  }, [caps, clickValue, autoClicker, energy, maxEnergy, clickLevel, energyLevel]);

  /* ---------- –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è —É—Ö–æ–¥–∞ ---------- */
  useEffect(() => {
    const saveVisit = () => {
      if (document.visibilityState === 'hidden') {
        localStorage.setItem('lastVisit', Date.now());
      }
    };
    window.addEventListener('visibilitychange', saveVisit);
    window.addEventListener('beforeunload', saveVisit);
    return () => {
      window.removeEventListener('visibilitychange', saveVisit);
      window.removeEventListener('beforeunload', saveVisit);
    };
  }, []);

  /* ---------- –∫–ª–∏–∫ –ø–æ –±–æ–º–±–µ ---------- */
  function handleClick() {
    if (!energy) return alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏!');
    setCaps(p => p + clickValue);
    setEnergy(p => p - 1);

    const id = Date.now() + Math.random();
    setClickGains(p => [...p, { id, text: `+${clickValue}` }]);
    setTimeout(() => setClickGains(p => p.filter(g => g.id !== id)), 800);
  }

  /* ---------- –ø–æ–∫—É–ø–∫–∏ ---------- */
  function buyUpgrade(id) {
    const cost = {
      clickUpgrade: 100 * clickLevel,
      autoClicker: 250,
      energyBoost: 150 * energyLevel,
    }[id];

    if (caps < cost) return alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–ø—Å!');

    setCaps(p => p - cost);

    if (id === 'clickUpgrade') {
      setClickValue(v => v + 1);
      setClickLevel(l => l + 1);
    }
    if (id === 'autoClicker' && !autoClicker) setAutoClicker(true);
    if (id === 'energyBoost') {
      setMaxEnergy(m => m + 10);
      setEnergy(e => e + 10);
      setEnergyLevel(l => l + 1);
    }
  }

  /* ---------- UI-—á–∞—Å—Ç—å ---------- */
  if (loading) {
    return (
      <div className="preloader">
        <div className="spinner" /><p>–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</p>
      </div>
    );
  }

  return (
    <div className="app">
      {/* –Ω–∏–∂–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ */}
      <nav className="bottom-tabs">
        {Object.values(TABS).map(t => (
          <button key={t}
                  className={`bottom-tab ${tab === t ? 'active' : ''}`}
                  onClick={() => setTab(t)}>
            {t === 'game' ? 'üéÆ' : t === 'shop' ? 'üõí' : 'üìä'}
          </button>
        ))}
      </nav>

      {/* --- GAME --- */}
      {tab === TABS.GAME && (
        <>
          <div className="top-bar">
            <button className="boosts-toggle-button" onClick={() => setBoostsModal(true)}>
              –ë—É—Å—Ç—ã
            </button>
            <div className="energy" title="–≠–Ω–µ—Ä–≥–∏—è">
              üîã {energy}/{maxEnergy}
            </div>
          </div>

          <div className="counter">{caps.toLocaleString('ru-RU')}</div>

          <div className="click-button-container">
            <button className="click-button"
                    disabled={!energy}
                    onClick={handleClick}>
              üí£
            </button>
            {clickGains.map(g => (
              <div key={g.id} className="click-gain">{g.text}</div>
            ))}
          </div>
        </>
      )}

      {/* --- SHOP / STATS --- */}
      {tab === TABS.SHOP && <div className="shop"><p>–ú–∞–≥–∞–∑–∏–Ω –±—É–¥–µ—Ç –ø–æ–∑–∂–µ üôÇ</p></div>}
      {tab === TABS.STATS && (
        <div className="stats">
          <p>–í—Å–µ–≥–æ –∫–∞–ø—Å: {caps.toLocaleString('ru-RU')}</p>
          <p>–°–∏–ª–∞ –∫–ª–∏–∫–∞: x{clickValue}</p>
          <p>–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä: {autoClicker ? '–í–∫–ª.' : '–í—ã–∫–ª.'}</p>
          <p>–≠–Ω–µ—Ä–≥–∏—è: {energy}/{maxEnergy}</p>
          <p>Lvl –∫–ª–∏–∫–∞: {clickLevel}</p>
          <p>Lvl —ç–Ω–µ—Ä–≥–∏–∏: {energyLevel}</p>
        </div>
      )}

      {/* --- –º–æ–¥–∞–ª–∫–∞ –±—É—Å—Ç–æ–≤ --- */}
      {boostsModal && (
        <div className="modal-overlay" onClick={() => setBoostsModal(false)}>
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <h2>–ë—É—Å—Ç—ã</h2>

            <div className="boosts">
              {/* click */}
              <div className="boost-card">
                <div className="boost-icon">üí•</div>
                <div className="boost-info">
                  <h4>–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∏–∫</h4>
                  <p>–£—Ä–æ–≤–µ–Ω—å: {clickLevel} ‚Ä¢ +{clickLevel} –∫ —Å–∏–ª–µ –∫–ª–∏–∫–∞</p>
                </div>
                <button
                  onClick={() => buyUpgrade('clickUpgrade')}
                  disabled={caps < 100 * clickLevel}>
                  {100 * clickLevel} –∫–∞–ø—Å
                </button>
              </div>

              {/* auto */}
              <div className="boost-card">
                <div className="boost-icon">ü§ñ</div>
                <div className="boost-info">
                  <h4>–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä</h4>
                  <p>+1 –∫–∞–ø—Å–∞ –∫–∞–∂–¥—ã–µ 2‚Äâ—Å</p>
                </div>
                <button
                  onClick={() => buyUpgrade('autoClicker')}
                  disabled={autoClicker || caps < 250}>
                  {autoClicker ? '–ö—É–ø–ª–µ–Ω–æ ‚úÖ' : '250 –∫–∞–ø—Å'}
                </button>
              </div>

              {/* energy */}
              <div className="boost-card">
                <div className="boost-icon">‚ö°</div>
                <div className="boost-info">
                  <h4>–≠–Ω–µ—Ä–≥–∏—è</h4>
                  <p>–£—Ä–æ–≤–µ–Ω—å: {energyLevel} ‚Ä¢ +{energyLevel * 10} –∫ –º–∞–∫—Å–∏–º—É–º—É —ç–Ω–µ—Ä–≥–∏–∏</p>
                </div>
                <button
                  onClick={() => buyUpgrade('energyBoost')}
                  disabled={caps < 150 * energyLevel}>
                  {150 * energyLevel} –∫–∞–ø—Å
                </button>
              </div>
            </div>

            <button className="modal-close-button"
                    onClick={() => setBoostsModal(false)}>
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        </div>
      )}

      {/* --- –æ—Ñ–ª–∞–π–Ω-–º–æ–¥–∞–ª–∫–∞ --- */}
      {showOfflineModal && (
        <div className="modal-overlay" onClick={() => setShowOfflineModal(false)}>
          <div className="offline-modal" onClick={e => e.stopPropagation()}>
            <h3>–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä —Ç—Ä—É–¥–∏–ª—Å—è!</h3>
            <p>–ü–æ–∫–∞ –≤–∞—Å –Ω–µ –±—ã–ª–æ, –¥–æ–±—ã—Ç–æ:</p>
            <p className="big">{offlineEarned.toLocaleString('ru-RU')} –∫–∞–ø—Å üí∞</p>
            <button onClick={() => setShowOfflineModal(false)}>–ö–ª–∞—Å—Å!</button>
          </div>
        </div>
      )}
    </div>
  );
}

export default App;
