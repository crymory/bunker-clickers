import React, { useState, useEffect } from 'react';
import './App.css';

const TABS = {
  GAME: 'game',
  SHOP: 'shop',
  STATS: 'stats',
};

function App() {
  const [user, setUser] = useState(null); // –ø—Ä–æ—Ñ–∏–ª—å Telegram
  const [tab, setTab] = useState(TABS.GAME);
  const [caps, setCaps] = useState(0);
  const [clickValue, setClickValue] = useState(1);
  const [autoClicker, setAutoClicker] = useState(false);
  const [energy, setEnergy] = useState(20);
  const [maxEnergy, setMaxEnergy] = useState(20);
  const [clickLevel, setClickLevel] = useState(1);
  const [energyLevel, setEnergyLevel] = useState(1);

  const [clickGains, setClickGains] = useState([]);
  const [boostsModalOpen, setBoostsModalOpen] = useState(false);

  // –ö–ª—é—á–∏ localStorage –±—É–¥—É—Ç —Å userId, —á—Ç–æ–±—ã —Ä–∞–∑–¥–µ–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const getStorageKey = (key) => {
    if (user?.id) return `${key}_${user.id}`;
    return `guest_${key}`;
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ user
  useEffect(() => {
    if (!user) return;

    setCaps(parseInt(localStorage.getItem(getStorageKey('caps'))) || 0);
    setClickValue(parseInt(localStorage.getItem(getStorageKey('clickValue'))) || 1);
    setAutoClicker(localStorage.getItem(getStorageKey('autoClicker')) === 'true');
    setEnergy(parseInt(localStorage.getItem(getStorageKey('energy'))) || 20);
    setMaxEnergy(parseInt(localStorage.getItem(getStorageKey('maxEnergy'))) || 20);
    setClickLevel(parseInt(localStorage.getItem(getStorageKey('clickLevel'))) || 1);
    setEnergyLevel(parseInt(localStorage.getItem(getStorageKey('energyLevel'))) || 1);
  }, [user]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    if (!user) return;

    localStorage.setItem(getStorageKey('caps'), caps);
  }, [caps, user]);

  useEffect(() => {
    if (!user) return;

    localStorage.setItem(getStorageKey('clickValue'), clickValue);
  }, [clickValue, user]);

  useEffect(() => {
    if (!user) return;

    localStorage.setItem(getStorageKey('autoClicker'), autoClicker);
  }, [autoClicker, user]);

  useEffect(() => {
    if (!user) return;

    localStorage.setItem(getStorageKey('energy'), energy);
  }, [energy, user]);

  useEffect(() => {
    if (!user) return;

    localStorage.setItem(getStorageKey('maxEnergy'), maxEnergy);
  }, [maxEnergy, user]);

  useEffect(() => {
    if (!user) return;

    localStorage.setItem(getStorageKey('clickLevel'), clickLevel);
  }, [clickLevel, user]);

  useEffect(() => {
    if (!user) return;

    localStorage.setItem(getStorageKey('energyLevel'), energyLevel);
  }, [energyLevel, user]);

  // –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä
  useEffect(() => {
    if (!user || !autoClicker) return;
    const interval = setInterval(() => {
      setCaps(prev => prev + 1);
    }, 2000);
    return () => clearInterval(interval);
  }, [autoClicker, user]);

  // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–∏–∏
  useEffect(() => {
    if (!user) return;
    const regenInterval = setInterval(() => {
      setEnergy(prev => {
        if (prev < maxEnergy) return prev + 1;
        return prev;
      });
    }, 60000);
    return () => clearInterval(regenInterval);
  }, [maxEnergy, user]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ Telegram WebApp
  useEffect(() => {
    if (window.Telegram?.WebApp) {
      const tg = window.Telegram.WebApp;
      const profile = tg.initDataUnsafe?.user || null;
      setUser(profile);
      tg.ready(); // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî —Å–æ–æ–±—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É —á—Ç–æ –≤—Å—ë –≥–æ—Ç–æ–≤–æ
    } else {
      // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞ –≤–Ω–µ Telegram
      setUser(null);
    }
  }, []);

  function handleClick() {
    if (energy > 0) {
      setCaps(prev => prev + clickValue);
      setEnergy(prev => prev - 1);

      const id = Date.now() + Math.random();
      setClickGains(prev => [...prev, { id, text: `+${clickValue}` }]);
      setTimeout(() => {
        setClickGains(prev => prev.filter(g => g.id !== id));
      }, 800);
    } else {
      alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏!');
    }
  }

  function buyUpgrade(id) {
    if (id === 'clickUpgrade' && caps >= 100 * clickLevel) {
      setCaps(caps - 100 * clickLevel);
      setClickValue(prev => prev + 1);
      setClickLevel(prev => prev + 1);
    } else if (id === 'autoClicker' && caps >= 250 && !autoClicker) {
      setCaps(caps - 250);
      setAutoClicker(true);
    } else if (id === 'energyBoost' && caps >= 150 * energyLevel) {
      setCaps(caps - 150 * energyLevel);
      setMaxEnergy(prev => prev + 10);
      setEnergy(prev => prev + 10);
      setEnergyLevel(prev => prev + 1);
    } else {
      alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–ø—Å –∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ —É–∂–µ –∫—É–ø–ª–µ–Ω–æ');
    }
  }

  return (
    <div className="app">
      {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      <div style={{ marginBottom: '10px', fontSize: '1rem', color: '#00e6a8' }}>
        {user ? (
          <>
            –ü—Ä–∏–≤–µ—Ç, {user.first_name} {user.last_name || ''} {user.username ? `( @${user.username} )` : ''}
          </>
        ) : (
          <>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –∏–≥—Ä—É —á–µ—Ä–µ–∑ Telegram WebApp –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.</>
        )}
      </div>

      {/* –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å –≤–∫–ª–∞–¥–æ–∫ */}
      <nav className="bottom-tabs">
        {Object.values(TABS).map(t => (
          <button
            key={t}
            onClick={() => setTab(t)}
            className={`bottom-tab ${tab === t ? 'active' : ''}`}
          >
            {t === 'game' ? 'üéÆ' : t === 'shop' ? 'üõí' : 'üìä'}
          </button>
        ))}
      </nav>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
      {tab === TABS.GAME && (
        <>
          <div className="top-bar">
            <button className="boosts-toggle-button" onClick={() => setBoostsModalOpen(true)}>
              –ë—É—Å—Ç—ã
            </button>

            <div className="energy" title="–≠–Ω–µ—Ä–≥–∏—è">
              <span className="battery-icon">üîã</span> {energy}/{maxEnergy}
            </div>
          </div>

          <div className="counter">{caps.toLocaleString('ru-RU')}</div>

          <div className="click-button-container">
            <button
              className="click-button"
              onClick={handleClick}
              disabled={energy === 0}
              title={energy === 0 ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏' : '–ö–ª–∏–∫–Ω–∏!'}
            >
              üí£
            </button>
            {clickGains.map(gain => (
              <div key={gain.id} className="click-gain">{gain.text}</div>
            ))}
          </div>
        </>
      )}

      {tab === TABS.SHOP && (
        <div className="shop">
          <p>–ú–∞–≥–∞–∑–∏–Ω –±—É–¥–µ—Ç –ø–æ–∑–∂–µ :)</p>
        </div>
      )}

      {tab === TABS.STATS && (
        <div className="stats">
          <p>–í—Å–µ–≥–æ –∫–∞–ø—Å: {caps.toLocaleString('ru-RU')}</p>
          <p>–ó–Ω–∞—á–µ–Ω–∏–µ –∫–ª–∏–∫–∞: x{clickValue}</p>
          <p>–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä: {autoClicker ? '–í–∫–ª—é—á—ë–Ω' : '–í—ã–∫–ª—é—á–µ–Ω'}</p>
          <p>–≠–Ω–µ—Ä–≥–∏—è: {energy}/{maxEnergy}</p>
          <p>–£—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–∫–∞: {clickLevel}</p>
          <p>–£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏: {energyLevel}</p>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±—É—Å—Ç–æ–≤ */}
      {boostsModalOpen && (
        <div className="modal-overlay" onClick={() => setBoostsModalOpen(false)}>
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <h2>–ë—É—Å—Ç—ã</h2>

            <div className="boosts">
              <div className="boost-card">
                <div className="boost-icon">üí•</div>
                <div className="boost-info">
                  <h4>–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∏–∫</h4>
                  <p>–£—Ä–æ–≤–µ–Ω—å: {clickLevel} ‚Äî +{clickLevel} –∫ —Å–∏–ª–µ –∫–ª–∏–∫–∞</p>
                </div>
                <button
                  onClick={() => buyUpgrade('clickUpgrade')}
                  disabled={caps < 100 * clickLevel}
                >
                  {100 * clickLevel} –∫–∞–ø—Å
                </button>
              </div>

              <div className="boost-card">
                <div className="boost-icon">ü§ñ</div>
                <div className="boost-info">
                  <h4>–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä</h4>
                  <p>+1 –∫–∞–ø—Å–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã</p>
                </div>
                <button
                  onClick={() => buyUpgrade('autoClicker')}
                  disabled={autoClicker || caps < 250}
                >
                  {autoClicker ? '–ö—É–ø–ª–µ–Ω–æ ‚úÖ' : '250 –∫–∞–ø—Å'}
                </button>
              </div>

              <div className="boost-card">
                <div className="boost-icon">‚ö°</div>
                <div className="boost-info">
                  <h4>–≠–Ω–µ—Ä–≥–∏—è</h4>
                  <p>–£—Ä–æ–≤–µ–Ω—å: {energyLevel} ‚Äî +{energyLevel * 10} –∫ –º–∞–∫—Å–∏–º—É–º—É —ç–Ω–µ—Ä–≥–∏–∏</p>
                </div>
                <button
                  onClick={() => buyUpgrade('energyBoost')}
                  disabled={caps < 150 * energyLevel}
                >
                  {150 * energyLevel} –∫–∞–ø—Å
                </button>
              </div>
            </div>

            <button
              className="modal-close-button"
              onClick={() => setBoostsModalOpen(false)}
            >
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

export default App;
